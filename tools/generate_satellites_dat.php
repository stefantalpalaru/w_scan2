<?
/* generate_satellites_dat.php // (c) 2021 Jean-Marc Wislez
 * This script generates a satellites.dat file, based on kingofsat.net ini-files
 * It is written in php, just because that's the language I'm most fluent in, and anyway this script only needs to be run every few years
 * Instructions:
 * - with a download application (e.g. "Simple mass downloader" on Firefox), download all .ini files from https://en.kingofsat.net/satellites.php
 * - put this script in the same directory as the .ini files
 * - run "php -n generate_satellites_dat.php > satellites.dat"
 * - move the autogenerated satellites.dat file to w_scan2/src
 * - compile w_scan2
 */

print ("/******************************************************************************\n");
print (" * This file provides autoscan initial data for w_scan2.\n");
print (" * This file is autogenerated using 'generate_satellites_dat.php'\n");
print (" * based on ini-files downloaded from https://en.kingofsat.net/satellites.php.\n");
print (" *\n");
print (" * Transponder data is encoded as a dump of the __sat_transponder struct.\n");
print (" * This file was autogenerated on ".date(DATE_RFC2822).".\n");
print (" *****************************************************************************/\n\n");

$error = false;
$in_dvb = false;
$in_sattype = false;
$sat_id = "";
$sat_list = "";
$enum_satellite = "";
$flag = "";

$files = scandir(".");
foreach($files as $file) {
	if(strstr($file, ".ini")) {
		$inifile = fopen($file, "r");
		$line_number = 0;
		while ($line = fgets($inifile)) {
			$line_number++;
			if ($line_number == 1) {
				$source_info = substr($line, strpos($line, "["), -2);
			}
			else if (substr($line, 0, 9) == "[SATTYPE]") {
				$in_sattype = true;
				$in_dvb = false;
			}
			else if (substr ($line, 0, 5) == "[DVB]") {
				$in_sattype = false;
				$in_dvb = true;
			}
			else if ($in_sattype) {
			  if (substr($line,0,2) == "1=") {
			    if ($sat_id) {
			      print ("E(__$sat_id)\n\n");
			    }
			    $sat_pos=intval(substr($line,2,5));
			    if ($sat_pos > 1800) {
			      $sat_id = "S".floor((3600 - $sat_pos) / 10)."W".((3600 - $sat_pos) % 10);  
			      $sat_pos = 3600 - $sat_pos;
			      $flag = "WEST_FLAG";
			    }
			    else {
			      $sat_id = "S".floor($sat_pos / 10)."E".($sat_pos % 10);  
			      $flag = "EAST_FLAG";
			    }
			    $enum_satellite .= "$sat_id,\n";
			    $sat_list .= "{ \"$sat_id\", $sat_id, \"Satellite at ".($sat_pos/10)." ".substr($flag, 0, 4)."\", __$sat_id, SAT_TRANSPONDER_COUNT(__$sat_id), $flag, 0x$sat_pos, -1, \"S".($sat_pos/10).substr($flag,0,1)."\", 0 },\n";
			    
			    print ("/******************************************************************************\n");
			    print (" * $sat_id ($file)\n");
			    print (" * $source_info\n");  
          print (" ******************************************************************************/\n");
          print ("B(__$sat_id)\n");
			  }
			}
			else if ($in_dvb) {
			  if (substr($line, 0, 2) != "0=" and strpos($line, "=")) {
          $field = explode(",", substr($line, strpos($line, "=") + 1));
          $frequency = $field[0];
          switch($field[1]) {
          case "H": $polarization = 0; break;
          case "V": $polarization = 1; break;
          case "R": $polarization = 2; break;
          case "L": $polarization = 3; break;
          default: print ("/* NOTE: polarization '".$field[1]."' not recognized, using horizontal */\n"); $polarization = 0; break;
          }
          $symbolrate = $field[2];
          switch($field[3]) {
          case "12": $fec = 1; break;
          case "23": $fec = 2; break;
          case "34": $fec = 3; break;
          case "45": $fec = 4; break;
          case "56": $fec = 5; break;
          case "67": $fec = 6; break;
          case "78": $fec = 7; break;
          case "89": $fec = 8; break;
          case "35": $fec = 9; break;
          case "910": $fec = 10; break;
          default: print ("/* NOTE: FEC '".$field[3]."' not recognized, using auto */\n"); $fec = 0; break;
          }
          switch($field[4]) {
          case "DVB-S": $delsys = 5; break;
          case "S2": $delsys = 6; break;
          default: print ("/* NOTE: Delivery system '".$field[4]."' not recognized, using DVB-S */\n"); $delsys = 5; break;
          }
          switch(substr($field[5], 0, -2)) {
          case "QPSK": $modulation = 0; break; // 0
          case "8PSK ACM/VCM":
          case "8PSK": $modulation = 9; break; // 1?
          //case "16APSK": $modulation = 2; break;
          //case "32APSK": $modulation = 3; break;
          default: print ("/* NOTE: Modulation '".substr($field[5], 0, -2)."' not recognized, using QPSK */\n"); $modulation = 0; break;
          }
          print ("{ $delsys, $frequency, $polarization, $symbolrate, $fec, 0, $modulation },\n"); // NOTE: rolloff is always set to AUTO
        }
      }
		}
		fclose($inifile);
	}
}
if ($sat_id) {
  print ("E(__$sat_id)\n\n");
}
		
print ("/******************************************************************************\n");
print (" * Every satellite has its own number here.\n");
print (" * COPY FROM TABLE BELOW - DO NOT EDIT BY HAND.\n");
print (" *****************************************************************************/\n");
print ("enum __satellite {\n$enum_satellite};\n\n");

print ("/******************************************************************************\n");
print (" * position constants, east/west flag as separator, 22.0 west => S22W0\n");
print (" * .X if two or more sats on nearly same position. <- deprecated.\n");
print (" * satellites sorted by position\n");
print (" *****************************************************************************/\n");

print ("struct cSat sat_list[] = {\n");
print ("/** pos *** id *** long satellite name ***************************** items ************ item_count ********** we_flag * orbit * rotor * vdrid * skew */\n");
print ($sat_list);
print ("};\n");

?>
